security:

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER

    # https://symfony.com/doc/current/security/authenticator_manager.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:

        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true
            jwt: ~

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:

            lazy: true
            provider: app_user_provider
            
            form_login: ~
            entry_point: form_login
            custom_authenticators:
                - App\Security\LoginFormAuthenticator

            logout:
                path: app_logout
            

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:

        - { path: ^/login, role: PUBLIC_ACCESS }
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        - { path: '^/admin/', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }
